#!/usr/bin/env python3
"""
Exemple d'utilisation des nouvelles fonctionnalit√©s du parser GeneWeb

Ce script d√©montre les am√©liorations apport√©es au parser :
- Support des apostrophes dans les identifiants
- Support des caract√®res sp√©ciaux dans les occupations
- D√©duplication intelligente avec num√©ros d'occurrence
- Support des nouveaux blocs GeneWeb
- Parsing des enfants et t√©moins avec toutes leurs informations
"""

from geneweb_py import GeneWebParser


def main():
    """D√©monstration des nouvelles fonctionnalit√©s du parser"""

    # Contenu de test avec toutes les nouvelles fonctionnalit√©s
    content = """
fam d'Arc Jean-Marie .1 #occu Ing√©nieur_(ENSIA),_Aum√¥nier_de_l'enseignement + O'Brien Marie-Claire .2
wit m: GALTIER Bernard .1 #occu Dominicain,_Aum√¥nier_de_l'enseignement_technique_√†_Rouen
beg
- h Pierre_Bernard .1 #occu Ing√©nieur,_√©diteur
- f Marie_Claire .2 #occu Conseill√®re_en_√©conomie_sociale_et_familiale
end

notes-db
Notes g√©n√©rales sur cette famille
Informations suppl√©mentaires
end notes-db

page-ext d'Arc Jean-Marie .1
<h1>Page de Jean-Marie d'Arc</h1>
<p>Informations suppl√©mentaires...</p>
end page-ext

wizard-note O'Brien Marie-Claire .2
Note g√©n√©r√©e par le wizard pour Marie-Claire
Informations suppl√©mentaires
end wizard-note
"""

    print("üöÄ D√©monstration des nouvelles fonctionnalit√©s du parser GeneWeb")
    print("=" * 70)

    # Cr√©er le parser
    parser = GeneWebParser()

    # Parser le contenu
    print("üìñ Parsing du contenu...")
    genealogy = parser.parse_string(content)

    print("‚úÖ Parsing r√©ussi !")
    print(f"   - {len(genealogy.persons)} personnes trouv√©es")
    print(f"   - {len(genealogy.families)} familles trouv√©es")
    print()

    # Afficher les personnes avec leurs informations
    print("üë• Personnes pars√©es :")
    print("-" * 50)

    for _person_id, person in genealogy.persons.items():
        print(f"‚Ä¢ {person.first_name} {person.last_name}")
        print(f"  - Occurrence : {person.occurrence_number}")
        print(f"  - Occupation : {person.occupation or 'Non sp√©cifi√©e'}")

        # Afficher les m√©tadonn√©es si pr√©sentes
        if person.metadata:
            if "extended_page" in person.metadata:
                print(
                    f"  - Page √©tendue : {len(person.metadata['extended_page'])} √©l√©ment(s)"
                )
            if "wizard_note" in person.metadata:
                print(
                    f"  - Note wizard : {len(person.metadata['wizard_note'])} √©l√©ment(s)"
                )
        print()

    # Afficher les notes de base de donn√©es
    if genealogy.metadata.database_notes:
        print("üìù Notes de base de donn√©es :")
        print("-" * 50)
        for note in genealogy.metadata.database_notes:
            print(f"‚Ä¢ {note}")
        print()

    # Afficher les statistiques
    print("üìä Statistiques :")
    print("-" * 50)
    stats = genealogy.get_statistics()
    print(f"‚Ä¢ Total personnes : {stats['total_persons']}")
    print(f"‚Ä¢ Total familles : {stats['total_families']}")
    print(
        f"‚Ä¢ Personnes avec occupation : {sum(1 for p in genealogy.persons.values() if p.occupation)}"
    )
    print(
        f"‚Ä¢ Personnes avec num√©ros d'occurrence : {sum(1 for p in genealogy.persons.values() if p.occurrence_number > 0)}"
    )
    print()

    # D√©monstration des fonctionnalit√©s sp√©cifiques
    print("üéØ Fonctionnalit√©s d√©montr√©es :")
    print("-" * 50)
    print("‚úÖ Support des apostrophes dans les identifiants (d'Arc, O'Brien)")
    print("‚úÖ Support des caract√®res sp√©ciaux dans les occupations")
    print("‚úÖ D√©duplication intelligente avec num√©ros d'occurrence")
    print("‚úÖ Support des nouveaux blocs GeneWeb (notes-db, page-ext, wizard-note)")
    print("‚úÖ Parsing des enfants avec sexes et occupations")
    print("‚úÖ Parsing des t√©moins avec toutes leurs informations")
    print()

    print("üéâ Toutes les nouvelles fonctionnalit√©s fonctionnent correctement !")


if __name__ == "__main__":
    main()
